package d04

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func countIncreasingPossibilities(length, leftmin, rightmax int) int {
	if length <= 0 {
		return 1
	}
	if length == 1 {
		return rightmax - leftmin + 1
	}
	sum := 0
	for i := leftmin; i <= rightmax; i++ {
		sum += countIncreasingPossibilities(length-1, i, rightmax)
	}
	return sum
}

func TestIncreasing(t *testing.T) {
	cc := []struct {
		length   int
		leftmin  int
		rightmax int
		count    int
	}{
		{1, 1, 9, 9},
		{1, 1, 8, 8},
		{1, 2, 9, 8},
		{1, 2, 8, 7},
		{1, 5, 5, 1},

		{2, 1, 1, 1},
		{2, 1, 2, 3}, // 11,12,22
		{2, 1, 3, 6}, // 11,12,13,22,23,33

		{3, 1, 1, 1},
		{3, 1, 2, 4}, // 111,112,122,222
	}
	for _, c := range cc {
		t.Run(fmt.Sprintf("%d-%d (%d)", c.leftmin, c.rightmax, c.length), func(t *testing.T) {
			a := assert.New(t)
			count := countIncreasingPossibilities(c.length, c.leftmin, c.rightmax)
			a.Equal(c.count, count)
		})
	}
}

func countIncreasingWithdoublePossibilities(length, leftmin, rightmax int) int {
	sum := 0

	// all double positions
	for i := 0; i < length-1; i++ {
		// all double values
		for j := leftmin; j <= rightmax; j++ {
			leftpart := countIncreasingPossibilities(i, 1, j)                    // before the double
			rightpart := countIncreasingPossibilities(length-i-2, j+1, rightmax) // after the double. +1 to ensure no double counting
			// fmt.Println(leftpart, rightpart)
			sum += leftpart * rightpart
		}
	}
	// fmt.Println("sum", length, sum)
	return sum
}

func TestIncreasingWithDouble(t *testing.T) {
	cc := []struct {
		length   int
		leftmin  int
		rightmax int
		count    int
	}{
		{2, 1, 1, 1},
		{2, 1, 2, 2}, // 11,22
		{2, 1, 3, 3}, // 11,22,33

		{3, 1, 1, 1},
		{3, 1, 2, 4}, // 111,112,122,222
	}
	for _, c := range cc {
		t.Run(fmt.Sprintf("%d-%d (%d)", c.leftmin, c.rightmax, c.length), func(t *testing.T) {
			a := assert.New(t)
			count := countIncreasingWithdoublePossibilities(c.length, c.leftmin, c.rightmax)
			a.Equal(c.count, count)
		})
	}
}

func TestFirst(t *testing.T) {
	a := assert.New(t)
	overAll := countIncreasingWithdoublePossibilities(6, 1, 9)
	// over5 := countIncreasingWithdoublePossibilities(5, 5, 9)
	over57 := countIncreasingWithdoublePossibilities(4, 7, 9)
	a.Equal(3, overAll-over57)
}
